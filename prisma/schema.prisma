// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String          @db.String
  email          String          @unique
  phone          String?         @db.String
  password       String          @db.String
  profilePicture String?         @db.String
  about          String?         @db.String // bio of the user
  address        String?         @db.String
  gender         UserGenderEnum?
  dateOfBirth    DateTime?
  status         UserStatusEnum? @default(ACTIVE)
  role           UserRoleEnum[] // Role of the user (e.g., SUPER_ADMIN, NEEDER, HELPER)
  verified       Boolean?        @default(false) // Indicates whether the user has verified their email or phone number
  isDeleted      Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // Relations
  notifications Notification[] // One-to-many relationship with Notification model
  userServices  UserService[] // Relation with UserService model

  @@map("users")
}

model Service {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String        @db.String
  userServices UserService[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("services")
}

model UserService {
  id        String   @id @default(uuid()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  serviceId String   @db.ObjectId
  service   Service  @relation(fields: [serviceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_services")
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  hexCode   String   @unique
  otp       String
  expiry    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("otps")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId // The instructor who will receive the notification
  title     String
  message   String // The message content of the notification
  body      String
  isRead    Boolean  @default(false) // Indicates whether the notification has been read
  createdAt DateTime @default(now()) // Timestamp of when the notification was created 

  isClicked Boolean @default(false) // Indicates whether the notification has been read
  User      User    @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Terms {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("terms")
}

model Policy {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("policy")
}

// Enums 
enum UserRoleEnum {
  SUPER_ADMIN
  USER
  NEEDER
  HELPER
}

enum UserStatusEnum {
  ACTIVE
  BLOCK
}

enum UserGenderEnum {
  Male
  Female
  Other
}
